#Description: 'Detects triggering of motion events'
#Help: "https://developer.android.com/reference/kotlin/android/view/MotionEvent"
#Code:


console.log('----Loading motionEvent Hook-------');
console.log('----gitHub: Ch0pin-----------------');
console.log('----Hooking Webview API calls------');


var motionEvent = Java.use('android.view.MotionEvent');


motionEvent.obtain.overload().implementation = function(){
    console.log("MotionEvent called without paremeters");
    return this.obtain();
}


motionEvent.obtain.overload('android.view.MotionEvent').implementation = function(motionEv){

    console.log('A new MotionEvent, copied from an existing one:' + motionEv.$className);
    return this.obtain(motionEv);

}




motionEvent.obtain.overload('long', 'long', 'int', 'float', 'float', 'int').implementation = function(downTime,eventTime,action,x,y,metaState){
    var actionType ='';
    if(action == '0'){
        actionType = 'ACTION_DOWN';
    }
    else if(action == '1'){
        actionType = 'ACTION_UP'
    }
    else actionType = action.toString();
    console.log('Motion event detected using the following parameters:'
    + '\ndownTime: '+downTime
    + '\neventTime: '+eventTime
    + '\naction: '+actionType
    + '\nx: '+x
    + '\ny: '+y
    + '\nmetaState: '+metastate);
    return this.obtain(downTime, eventTime, action,x,y,metastate);
}

motionEvent.obtain.overload('long', 'long', 'int', 'float', 'float', 'float', 'float', 'int', 'float', 'float', 'int', 'int').implementation = function(downTime, eventTime, action,x,y,pressure,size,metastate,xPrecission,yPrecission,deviceId,edgeFlags){
   // downTime, eventTime, action,x,y,pressure,size,metastate,xPrecission,yPrecission,deviceId,edgeFlags
   var actionType ='';
   if(action == '0'){
       actionType = 'ACTION_DOWN';
   }
   else if(action == '1'){
       actionType = 'ACTION_UP'
   }
   else actionType = action.toString();
    console.log('Motion event detected using the following parameters:'
    + '\ndownTime: '+downTime
    + '\neventTime: '+eventTime
    + '\naction: '+actionType
    + '\nx: '+x
    + '\ny: '+y
    + '\npressure: '+pressure
    + '\nsize: '+size
    + '\nmetaState: '+metastate
    + '\nxPrecission: '+xPrecission
    + '\nyPrecission: '+yPrecission
    + '\ndeviceId: '+deviceId
    + '\nedgeFlags: ' + edgeFlags);
    return this.obtain(downTime, eventTime, action,x,y,pressure,size,metastate,xPrecission,yPrecission,deviceId,edgeFlags);
}

motionEvent.obtain.overload('long', 'long', 'int', 'int', '[I', '[Landroid.view.MotionEvent$PointerCoords;', 'int', 'float', 'float', 'int', 'int', 'int', 'int').implementation = 
function(downTime,eventTime,action,pointerCount,pointerIds,pointerCoords,metaState,xPrecission,yPrecission,deviceId,edgeFlags,source,flags){
    console.log('[!] Motion event detected using obtain which was Deprecated in API level 15');
    return this.obtain(downTime,eventTime,action,pointerCount,pointerIds,pointerCoords,metaState,xPrecission,yPrecission,deviceId,edgeFlags,source,flags);
}

motionEvent.obtain.overload('long', 'long', 'int', 'int', 'float', 'float', 'float', 'float', 'int', 'float', 'float', 'int', 'int').implementation = 
function(downTime,eventTime,action,pointerCount,x,y,pressure,size,metaState,xPrecission,deviceId,edgeFlags){
    var actionType ='';
    if(action == '0'){
        actionType = 'ACTION_DOWN';
    }
    else if(action == '1'){
        actionType = 'ACTION_UP'
    }
    else actionType = action.toString();
    console.log('Motion event detected using the following parameters:'
    + '\ndownTime: '+downTime
    + '\neventTime: '+eventTime
    + '\naction: '+actionType
    + '\nPointercount: ' + pointerCount
    + '\nx: '+x
    + '\ny: '+y
    + '\npressure: '+pressure
    + '\nsize: '+size
    + '\nmetaState: '+metaState
    + '\nxPrecission: '+xPrecission
    + '\nyPrecission: '+yPrecission
    + '\ndeviceId: '+deviceId
    + '\nedgeFlags: ' + edgeFlags);
    return this.obtain(downTime,eventTime,action,pointerCount,x,y,pressure,size,metaState,xPrecission,deviceId,edgeFlags);           
}
motionEvent.obtain.overload('long', 'long', 'int', 'float', 'float', 'float', 'float', 'int', 'float', 'float', 'int', 'int', 'int', 'int').implementation = function(a,b,c,d,e,f,g,h,i,j,k,l,m,n){
    console.log('[+] Motion Event detected');
    return this.obtain(a,b,c,d,e,f,g,h,i,j,k,l,m,n);
}

motionEvent.obtain.overload('long', 'long', 'int', 'int', '[Landroid.view.MotionEvent$PointerProperties;', '[Landroid.view.MotionEvent$PointerCoords;', 'int', 'int', 'float', 'float', 'int', 'int', 'int', 'int').implementation = 
function(downTime,eventTime,action,pointerCount,pointerProperties,pointerCoords,metaState,buttonState,xPrecission,yPrecission,deviceId,edgeFlags,source,flags){
    var actionType ='';
    if(action == '0'){
        actionType = 'ACTION_DOWN';
    }
    else if(action == '1'){
        actionType = 'ACTION_UP'
    }
    else actionType = action.toString();
    console.log('Motion event detected using the following parameters:'
    + '\ndownTime: '+downTime
    + '\neventTime: '+eventTime
    + '\naction: '+actionType
    + '\npointerCount: ' + pointerCount
    + '\npointerProperties: ' + pointerProperties
    + '\npointerCoords: ' + pointerCoords
    + '\nmetaState: '+metaState
    + '\nbuttonState: '+buttonState
    + '\nxPrecission: '+xPrecission
    + '\nyPrecission: '+yPrecission
    + '\ndeviceId: '+deviceId
    + '\nedgeFlags: ' + edgeFlags
    + '\nsource: ' + source
    + '\nflags: '+flags);
    return this.obtain(downTime,eventTime,action,pointerCount,pointerProperties,pointerCoords,metaState,buttonState,xPrecission,yPrecission,deviceId,edgeFlags,source,flags);
}
motionEvent.obtain.overload('long', 'long', 'int', 'int', '[Landroid.view.MotionEvent$PointerProperties;', '[Landroid.view.MotionEvent$PointerCoords;', 'int', 'int', 'float', 'float', 'int', 'int', 'int', 'int', 'int').implementation = 
function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o){
    console.log('[+] Motion Event Detected');
    return this.obtain(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o);
}